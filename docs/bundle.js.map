{"version":3,"file":"bundle.js","sources":["../node_modules/gl-matrix/esm/common.js","../node_modules/gl-matrix/esm/mat3.js","../node_modules/gl-matrix/esm/mat4.js","../node_modules/gl-matrix/esm/vec4.js","../src/shader/VertexShader.js","../src/shader/FragmentShader.js","../src/shapes/Plane.js","../src/shapes/Sphere.js","../src/shapes/Torus.js","../src/App.js","../src/shader/CelVS.js","../src/shader/CelFS.js","../src/App2.js","../src/main.js"],"sourcesContent":["/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\r\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\n/**\r\n * 3x3 Matrix\r\n * @module mat3\r\n */\n\n/**\r\n * Creates a new identity mat3\r\n *\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the upper-left 3x3 values into the given mat3.\r\n *\r\n * @param {mat3} out the receiving 3x3 matrix\r\n * @param {ReadonlyMat4} a   the source 4x4 matrix\r\n * @returns {mat3} out\r\n */\n\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\r\n * Creates a new mat3 initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat3} a matrix to clone\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Copy the values from one mat3 to another\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Create a new mat3 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} A new mat3\r\n */\n\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set the components of a mat3 to the given values\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} out\r\n */\n\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set a mat3 to the identity matrix\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @returns {mat3} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat3\r\n *\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\r\n * Multiplies two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\r\n * Translate a mat3 by the given vector\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to translate\r\n * @param {ReadonlyVec2} v vector to translate by\r\n * @returns {mat3} out\r\n */\n\nexport function translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\r\n * Rotates a mat3 by the given angle\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nexport function rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n/**\r\n * Scales the mat3 by the dimensions in the given vec2\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to rotate\r\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\r\n * @returns {mat3} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.translate(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyVec2} v Translation vector\r\n * @returns {mat3} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.rotate(dest, dest, rad);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.scale(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyVec2} v Scaling vector\r\n * @returns {mat3} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the values from a mat2d into a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to copy\r\n * @returns {mat3} out\r\n **/\n\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Calculates a 3x3 matrix from the given quaternion\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyQuat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat3} out\r\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\r\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from\r\n *\r\n * @returns {mat3} out\r\n */\n\nexport function normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\r\n * Generates a 2D projection matrix with the given bounds\r\n *\r\n * @param {mat3} out mat3 frustum matrix will be written into\r\n * @param {number} width Width of your gl context\r\n * @param {number} height Height of gl context\r\n * @returns {mat3} out\r\n */\n\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Returns a string representation of a mat3\r\n *\r\n * @param {ReadonlyMat3} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return \"mat3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \")\";\n}\n/**\r\n * Returns Frobenius norm of a mat3\r\n *\r\n * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);\n}\n/**\r\n * Adds two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat3} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\r\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat3} out the receiving vector\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat3} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat3} a The first matrix.\r\n * @param {ReadonlyMat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat3} a The first matrix.\r\n * @param {ReadonlyMat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\r\n * Alias for {@link mat3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\n\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to translate\r\n * @param {ReadonlyVec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to scale\r\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {ReadonlyVec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyVec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {ReadonlyVec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {ReadonlyQuat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @param {ReadonlyVec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @param {ReadonlyVec3} s Scaling vector\r\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyQuat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\n\nexport function perspective(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function ortho(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {ReadonlyVec3} eye Position of the viewer\r\n * @param {ReadonlyVec3} center Point the viewer is looking at\r\n * @param {ReadonlyVec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {ReadonlyVec3} eye Position of the viewer\r\n * @param {ReadonlyVec3} center Point the viewer is looking at\r\n * @param {ReadonlyVec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {ReadonlyMat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat4} a The first matrix.\r\n * @param {ReadonlyMat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat4} a The first matrix.\r\n * @param {ReadonlyMat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\n\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with values from an existing vector\r\n *\r\n * @param {ReadonlyVec4} a vector to clone\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the source vector\r\n * @returns {vec4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\r\n * Multiplies two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\r\n * Divides two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to ceil\r\n * @returns {vec4} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to floor\r\n * @returns {vec4} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to round\r\n * @returns {vec4} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\r\n * Adds two vec4's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec4} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec4's\r\n *\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec4's\r\n *\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {ReadonlyVec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\r\n * Calculates the squared length of a vec4\r\n *\r\n * @param {ReadonlyVec4} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Negates the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to negate\r\n * @returns {vec4} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to invert\r\n * @returns {vec4} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\r\n * Returns the cross-product of three vectors in a 4-dimensional space\r\n *\r\n * @param {ReadonlyVec4} result the receiving vector\r\n * @param {ReadonlyVec4} U the first vector\r\n * @param {ReadonlyVec4} V the second vector\r\n * @param {ReadonlyVec4} W the third vector\r\n * @returns {vec4} result\r\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec4} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec4} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a mat4.\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the vector to transform\r\n * @param {ReadonlyMat4} m matrix to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a quat\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the vector to transform\r\n * @param {ReadonlyQuat} q quaternion to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to zero\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @returns {vec4} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {ReadonlyVec4} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyVec4} a The first vector.\r\n * @param {ReadonlyVec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyVec4} a The first vector.\r\n * @param {ReadonlyVec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\r\n * Alias for {@link vec4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec4.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec4.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec4.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec4.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec4.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();","export let VertexShader = `\r\n    attribute vec3 aPosition;\r\n    attribute vec3 aNormal;\r\n\r\n    uniform mat4 uPMatrix;\r\n    uniform mat4 uMVMatrix;\r\n    uniform mat3 uNMatrix;\r\n\r\n    //uniform vec4 uColor;\r\n    varying vec4 vColor;\r\n                \r\n    // Ambient light.\r\n    uniform vec3 ambientLight;\r\n\r\n    // Pointlights.\r\n    const int MAX_LIGHT_SOURCES = 8;\r\n    struct LightSource {\r\n        bool isOn;\r\n        vec3 position;\r\n        vec3 color;\r\n    };\r\n    uniform LightSource light[MAX_LIGHT_SOURCES];\r\n\r\n    // Material.\r\n    struct PhongMaterial {\r\n        vec3 ka;\r\n        vec3 kd;\r\n        vec3 ks;\r\n        float ke; \r\n    };\r\n    uniform PhongMaterial material;\r\n\r\n    // Phong illumination for single light source,\r\n    // no ambient light.\r\n    vec3 phong(vec3 p, vec3 n, vec3 v, LightSource l) {\r\n        // return vec3(0.0);\r\n        vec3 L = l.color;\r\n\r\n        vec3 s = normalize(l.position - p);\r\n        vec3 r = reflect(-s, n);\r\n                \r\n        float sn = max( dot(s,n), 0.0);\r\n        float rv = max( dot(r,v), 0.0);\r\n                          \r\n        vec3 diffuse = material.kd * L * sn;\r\n                                \r\n        vec3 specular = material.ks * L * pow(rv, material.ke);\r\n            \r\n        return diffuse + specular;\r\n    }\r\n\r\n    // Phong illumination for multiple light sources\r\n    vec3 phong(vec3 p, vec3 n, vec3 v) {\r\n\r\n        // Calculate ambient light.\r\n        vec3 result = material.ka * ambientLight;\r\n        \r\n        // Add light from all light sources.\r\n        for(int j=0; j < MAX_LIGHT_SOURCES; j++){\r\n            if(light[j].isOn){\r\n                result += phong(p, n, v, light[j]);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    void main(){\r\n        // Calculate vertex position in eye coordinates. \r\n        vec4 tPosition = uMVMatrix * vec4(aPosition, 1.0);\r\n        // Calculate projektion.\r\n        gl_Position = uPMatrix * tPosition;\r\n\r\n        vec3 tNormal = normalize(uNMatrix * aNormal);\r\n        \r\n        // Calculate view vector.\r\n        vec3 v = normalize(-tPosition.xyz);\t\r\n                        \r\n        vColor = vec4( phong(tPosition.xyz, tNormal, v), 1.0);\r\n    }\r\n`","export let FragmentShader = `\r\n    precision mediump float;\r\n                \r\n    varying vec4 vColor;\r\n\r\n    void main() {\r\n        gl_FragColor = vColor;\r\n    }\r\n`","// BEGIN exercise plane\nexport let Plane = ( function() {\n\n\tfunction createVertexData() {\n\t\tlet n = 100;\n\t\tlet m = 100;\n\n\t\t// Positions.\n\t\tthis.vertices = new Float32Array(3 * (n + 1) * (m + 1));\n\t\tlet vertices = this.vertices;\n\t\t// Normals.\n\t\tthis.normals = new Float32Array(3 * (n + 1) * (m + 1));\n\t\tlet normals = this.normals;\n\t\t// Index data.\n\t\tthis.indicesLines = new Uint16Array(2 * 2 * n * m);\n\t\tlet indicesLines = this.indicesLines;\n\t\tthis.indicesTris = new Uint16Array(3 * 2 * n * m);\n\t\tlet indicesTris = this.indicesTris;\n\n\t\tlet du = 20 / n;\n\t\tlet dv = 20 / m;\n\t\t// Counter for entries in index array.\n\t\tlet iLines = 0;\n\t\tlet iTris = 0;\n\n\t\t// Loop u.\n\t\tfor(let i = 0, u = -10; i <= n; i++, u += du) {\n\t\t\t// Loop v.\n\t\t\tfor(let j = 0, v = -10; j <= m; j++, v += dv) {\n\n\t\t\t\tlet iVertex = i * (m + 1) + j;\n\n\t\t\t\tlet x = u;\n\t\t\t\tlet y = 0;\n\t\t\t\tlet z = v;\n\n\t\t\t\t// Set vertex positions.\n\t\t\t\tvertices[iVertex * 3] = x;\n\t\t\t\tvertices[iVertex * 3 + 1] = y;\n\t\t\t\tvertices[iVertex * 3 + 2] = z;\n\n\t\t\t\t// Calc and set normals.\n\t\t\t\tnormals[iVertex * 3] = 0;\n\t\t\t\tnormals[iVertex * 3 + 1] = 1;\n\t\t\t\tnormals[iVertex * 3 + 2] = 0;\n\n\t\t\t\t// Set index.\n\t\t\t\t// Line on beam.\n\t\t\t\tif(j > 0 && i > 0) {\n\t\t\t\t\tindicesLines[iLines++] = iVertex - 1;\n\t\t\t\t\tindicesLines[iLines++] = iVertex;\n\t\t\t\t}\n\t\t\t\t// Line on ring.\n\t\t\t\tif(j > 0 && i > 0) {\n\t\t\t\t\tindicesLines[iLines++] = iVertex - (m + 1);\n\t\t\t\t\tindicesLines[iLines++] = iVertex;\n\t\t\t\t}\n\n\t\t\t\t// Set index.\n\t\t\t\t// Two Triangles.\n\t\t\t\tif(j > 0 && i > 0) {\n\t\t\t\t\tindicesTris[iTris++] = iVertex;\n\t\t\t\t\tindicesTris[iTris++] = iVertex - 1;\n\t\t\t\t\tindicesTris[iTris++] = iVertex - (m + 1);\n\t\t\t\t\t//\n\t\t\t\t\tindicesTris[iTris++] = iVertex - 1;\n\t\t\t\t\tindicesTris[iTris++] = iVertex - (m + 1) - 1;\n\t\t\t\t\tindicesTris[iTris++] = iVertex - (m + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn { vertices: vertices, normals: normals, indicesLines: indicesLines, indicesTris: indicesTris };\n\t}\n\n\treturn {\n\t\tcreateVertexData : createVertexData\n\t}\n\n}());\n//END exercise plane","export let Sphere = ( function() {\n\n\tfunction createVertexData() {\n\t\tlet n = 30;\n\t\tlet m = 30;\n\n\t\t// Positions.\n\t\tthis.vertices = new Float32Array(3 * (n + 1) * (m + 1));\n\t\tlet vertices = this.vertices;\n\t\t// Normals.\n\t\tthis.normals = new Float32Array(3 * (n + 1) * (m + 1));\n\t\tlet normals = this.normals;\n\t\t// Index data.\n\t\tthis.indicesLines = new Uint16Array(2 * 2 * n * m);\n\t\tlet indicesLines = this.indicesLines;\n\t\tthis.indicesTris = new Uint16Array(3 * 2 * n * m);\n\t\tlet indicesTris = this.indicesTris;\n\n\t\tlet du = 2 * Math.PI / n;\n\t\tlet dv = Math.PI / m;\n\t\tlet r = 1;\n\t\t// Counter for entries in index array.\n\t\tlet iLines = 0;\n\t\tlet iTris = 0;\n\n\t\t// Loop angle u.\n\t\tfor(let i = 0, u = 0; i <= n; i++, u += du) {\n\t\t\t// Loop angle v.\n\t\t\tfor(let j = 0, v = 0; j <= m; j++, v += dv) {\n\n\t\t\t\tlet iVertex = i * (m + 1) + j;\n\n\t\t\t\tlet x = r * Math.sin(v) * Math.cos(u);\n\t\t\t\tlet y = r * Math.sin(v) * Math.sin(u);\n\t\t\t\tlet z = r * Math.cos(v);\n\n\t\t\t\t// Set vertex positions.\n\t\t\t\tvertices[iVertex * 3] = x;\n\t\t\t\tvertices[iVertex * 3 + 1] = y;\n\t\t\t\tvertices[iVertex * 3 + 2] = z;\n\n\t\t\t\t// Calc and set normals.\n\t\t\t\tlet vertexLength = Math.sqrt(x * x + y * y + z * z);\n\t\t\t\tnormals[iVertex * 3] = x / vertexLength;\n\t\t\t\tnormals[iVertex * 3 + 1] = y / vertexLength;\n\t\t\t\tnormals[iVertex * 3 + 2] = z / vertexLength;\n\n\t\t\t\t// Set index.\n\t\t\t\t// Line on beam.\n\t\t\t\tif(j > 0 && i > 0) {\n\t\t\t\t\tindicesLines[iLines++] = iVertex - 1;\n\t\t\t\t\tindicesLines[iLines++] = iVertex;\n\t\t\t\t}\n\t\t\t\t// Line on ring.\n\t\t\t\tif(j > 0 && i > 0) {\n\t\t\t\t\tindicesLines[iLines++] = iVertex - (m + 1);\n\t\t\t\t\tindicesLines[iLines++] = iVertex;\n\t\t\t\t}\n\n\t\t\t\t// Set index.\n\t\t\t\t// Two Triangles.\n\t\t\t\tif(j > 0 && i > 0) {\n\t\t\t\t\tindicesTris[iTris++] = iVertex;\n\t\t\t\t\tindicesTris[iTris++] = iVertex - 1;\n\t\t\t\t\tindicesTris[iTris++] = iVertex - (m + 1);\n\t\t\t\t\t//\n\t\t\t\t\tindicesTris[iTris++] = iVertex - 1;\n\t\t\t\t\tindicesTris[iTris++] = iVertex - (m + 1) - 1;\n\t\t\t\t\tindicesTris[iTris++] = iVertex - (m + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn { vertices: vertices, normals: normals, indicesLines: indicesLines, indicesTris: indicesTris };\n\t}\n\n\treturn {\n\t\tcreateVertexData : createVertexData\n\t}\n\n}());","export let Torus = ( function() {\n\n\tfunction createVertexData() {\n\t\tlet n = 16;\n\t\tlet m = 32;\n\n\t\t// Positions.\n\t\tthis.vertices = new Float32Array(3 * (n + 1) * (m + 1));\n\t\tlet vertices = this.vertices;\n\t\t// Normals.\n\t\tthis.normals = new Float32Array(3 * (n + 1) * (m + 1));\n\t\tlet normals = this.normals;\n\t\t// Index data.\n\t\tthis.indicesLines = new Uint16Array(2 * 2 * n * m);\n\t\tlet indicesLines = this.indicesLines;\n\t\tthis.indicesTris = new Uint16Array(3 * 2 * n * m);\n\t\tlet indicesTris = this.indicesTris;\n\n\t\tlet du = 2 * Math.PI / n;\n\t\tlet dv = 2 * Math.PI / m;\n\t\tlet r = 0.3;\n\t\tlet R = 0.5;\n\t\t// Counter for entries in index array.\n\t\tlet iLines = 0;\n\t\tlet iTris = 0;\n\n\t\t// Loop angle u.\n\t\tfor(let i = 0, u = 0; i <= n; i++, u += du) {\n\t\t\t// Loop angle v.\n\t\t\tfor(let j = 0, v = 0; j <= m; j++, v += dv) {\n\n\t\t\t\tlet iVertex = i * (m + 1) + j;\n\n\t\t\t\tlet x = (R + r * Math.cos(u) ) * Math.cos(v);\n\t\t\t\tlet y = (R + r * Math.cos(u) ) * Math.sin(v);\n\t\t\t\tlet z = r * Math.sin(u);\n\n\t\t\t\t// Set vertex positions.\n\t\t\t\tvertices[iVertex * 3] = x;\n\t\t\t\tvertices[iVertex * 3 + 1] = y;\n\t\t\t\tvertices[iVertex * 3 + 2] = z;\n\n\t\t\t\t// Calc and set normals.\n\t\t\t\tlet nx = Math.cos(u) * Math.cos(v);\n\t\t\t\tlet ny = Math.cos(u) * Math.sin(v);\n\t\t\t\tlet nz = Math.sin(u);\n\t\t\t\tnormals[iVertex * 3] = nx;\n\t\t\t\tnormals[iVertex * 3 + 1] = ny;\n\t\t\t\tnormals[iVertex * 3 + 2] = nz;\n\n\t\t\t\t// if(i>14){\n\t\t\t\t// continue;\n\t\t\t\t// }\n\n\t\t\t\t// Set index.\n\t\t\t\t// Line on beam.\n\t\t\t\tif(j > 0 && i > 0) {\n\t\t\t\t\tindicesLines[iLines++] = iVertex - 1;\n\t\t\t\t\tindicesLines[iLines++] = iVertex;\n\t\t\t\t}\n\t\t\t\t// Line on ring.\n\t\t\t\tif(j > 0 && i > 0) {\n\t\t\t\t\tindicesLines[iLines++] = iVertex - (m + 1);\n\t\t\t\t\tindicesLines[iLines++] = iVertex;\n\t\t\t\t}\n\n\t\t\t\t// Set index.\n\t\t\t\t// Two Triangles.\n\t\t\t\tif(j > 0 && i > 0) {\n\t\t\t\t\tindicesTris[iTris++] = iVertex;\n\t\t\t\t\tindicesTris[iTris++] = iVertex - 1;\n\t\t\t\t\tindicesTris[iTris++] = iVertex - (m + 1);\n\t\t\t\t\t//\n\t\t\t\t\tindicesTris[iTris++] = iVertex - 1;\n\t\t\t\t\tindicesTris[iTris++] = iVertex - (m + 1) - 1;\n\t\t\t\t\tindicesTris[iTris++] = iVertex - (m + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn { vertices: vertices, normals: normals, indicesLines: indicesLines, indicesTris: indicesTris };\n\t}\n\n\treturn {\n\t\tcreateVertexData : createVertexData\n\t}\n\n}());","import * as mat3 from 'gl-matrix/esm/mat3.js';\r\nimport * as mat4 from 'gl-matrix/esm/mat4.js';\r\nimport * as vec4 from 'gl-matrix/esm/vec4.js';\r\n\r\nimport { VertexShader } from './shader/VertexShader.js';\r\nimport { FragmentShader } from './shader/FragmentShader.js';\r\n\r\nimport { Plane } from './shapes/Plane.js';\r\nimport { Sphere } from './shapes/Sphere.js';\r\nimport { Torus } from './shapes/Torus.js';\r\n\r\nlet App = (function () {\r\n\r\n\tlet gl;\r\n\r\n\t// The shader program object is also used to\r\n\t// store attribute and uniform locations.\r\n\tlet prog;\r\n\r\n\t// Array of model objects.\r\n\tlet models = [];\r\n\r\n\t// Model that is target for user input.\r\n\tlet interactiveModel;\r\n\r\n\tlet lightR = 3;\r\n\tlet light1Angle = 0;\r\n\tlet light2Angle = Math.PI;\r\n\r\n\tlet [l1x, l1y] = calcPosition(light1Angle, lightR);\r\n\tlet [l2x, l2y] = calcPosition(light2Angle, lightR);\r\n\r\n\tlet camera = {\r\n\t\t// Initial position of the camera.\r\n\t\teye: [0, 1, 4],\r\n\t\t// Point to look at.\r\n\t\tcenter: [0, 0, 0],\r\n\t\t// Roll and pitch of the camera.\r\n\t\tup: [0, 1, 0],\r\n\t\t// Opening angle given in radian.\r\n\t\t// radian = degree*2*PI/360.\r\n\t\tfovy: 60.0 * Math.PI / 180,\r\n\t\t// Camera near plane dimensions:\r\n\t\t// value for left right top bottom in projection.\r\n\t\tlrtb: 2.0,\r\n\t\t// View matrix.\r\n\t\tvMatrix: mat4.create(),\r\n\t\t// Projection matrix.\r\n\t\tpMatrix: mat4.create(),\r\n\t\t// Projection types: ortho, perspective, frustum.\r\n\t\tprojectionType: \"perspective\",\r\n\t\t// Angle to Z-Axis for camera when orbiting the center\r\n\t\t// given in radian.\r\n\t\tzAngle: 0,\r\n\t\t// Distance in XZ-Plane from center when orbiting.\r\n\t\tdistance: 4,\r\n\t};\r\n\r\n\t// Objekt with light sources characteristics in the scene.\r\n\tlet illumination = {\r\n\t\tambientLight: [.5, .5, .5],\r\n\t\tlight: [{\r\n\t\t\tisOn: true,\r\n\t\t\tposition: [3., 1., 3.],\r\n\t\t\tcolor: [1., 1., 1.]\r\n\t\t}, {\r\n\t\t\tisOn: true,\r\n\t\t\tposition: [l1x, 1., l1y],\r\n\t\t\tcolor: [0.0, 1.0, 0.0]\r\n\t\t}, {\r\n\t\t\tisOn: true,\r\n\t\t\tposition: [l2x, 1., l2y],\r\n\t\t\tcolor: [0.0, 0.0, 1.0]\r\n\t\t}]\r\n\t};\r\n\r\n\tfunction start() {\r\n\t\tinit();\r\n\t\trender();\r\n\t}\r\n\r\n\tfunction init() {\r\n\t\tinitWebGL();\r\n\t\tinitShaderProgram();\r\n\t\tinitUniforms();\r\n\t\tinitModels();\r\n\t\tinitEventHandler();\r\n\t\tinitPipline();\r\n\t}\r\n\r\n\tfunction initWebGL() {\r\n\t\t// Get canvas and WebGL context.\r\n\t\tlet canvas = document.getElementById('canvas');\r\n\t\tgl = canvas.getContext('experimental-webgl');\r\n\t\tgl.viewportWidth = canvas.width;\r\n\t\tgl.viewportHeight = canvas.height;\r\n\t}\r\n\r\n\t/**\r\n\t * Init pipeline parmters that will not change again. If projection or\r\n\t * viewport change, thier setup must be in render function.\r\n\t */\r\n\tfunction initPipline() {\r\n\t\tgl.clearColor(.95, .95, .95, 1);\r\n\r\n\t\t// Backface culling.\r\n\t\tgl.frontFace(gl.CCW);\r\n\t\tgl.enable(gl.CULL_FACE);\r\n\t\tgl.cullFace(gl.BACK);\r\n\r\n\t\t// Depth(Z)-Buffer.\r\n\t\tgl.enable(gl.DEPTH_TEST);\r\n\r\n\t\t// Polygon offset of rastered Fragments.\r\n\t\tgl.enable(gl.POLYGON_OFFSET_FILL);\r\n\t\tgl.polygonOffset(0.5, 0);\r\n\r\n\t\t// Set viewport.\r\n\t\tgl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);\r\n\r\n\t\t// Init camera.\r\n\t\t// Set projection aspect ratio.\r\n\t\tcamera.aspect = gl.viewportWidth / gl.viewportHeight;\r\n\t}\r\n\r\n\tfunction initShaderProgram() {\r\n\t\t// Init vertex shader.\r\n\t\tlet vs = initShader(gl.VERTEX_SHADER, VertexShader);\r\n\t\t// Init fragment shader.\r\n\t\tlet fs = initShader(gl.FRAGMENT_SHADER, FragmentShader);\r\n\t\t// Link shader into a shader program.\r\n\t\tprog = gl.createProgram();\r\n\t\tgl.attachShader(prog, vs);\r\n\t\tgl.attachShader(prog, fs);\r\n\t\tgl.bindAttribLocation(prog, 0, \"aPosition\");\r\n\t\tgl.linkProgram(prog);\r\n\t\tgl.useProgram(prog);\r\n\t}\r\n\r\n\t/**\r\n\t * Create and init shader from source.\r\n\t * \r\n\t * @parameter shaderType: openGL shader type.\r\n\t * @parameter SourceTagId: Id of HTML Tag with shader source.\r\n\t * @returns shader object.\r\n\t */\r\n\tfunction initShader(shaderType, shaderSource) {\r\n\t\tlet shader = gl.createShader(shaderType);\r\n\t\t// let shaderSource = document.getElementById(SourceTagId).text;\r\n\t\tgl.shaderSource(shader, shaderSource);\r\n\t\tgl.compileShader(shader);\r\n\t\tif (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n\t\t\tconsole.log(gl.getShaderInfoLog(shader));\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\treturn shader;\r\n\t}\r\n\r\n\tfunction initUniforms() {\r\n\t\t// Projection Matrix.\r\n\t\tprog.pMatrixUniform = gl.getUniformLocation(prog, \"uPMatrix\");\r\n\r\n\t\t// Model-View-Matrix.\r\n\t\tprog.mvMatrixUniform = gl.getUniformLocation(prog, \"uMVMatrix\");\r\n\r\n\t\t// Normal Matrix.\r\n\t\tprog.nMatrixUniform = gl.getUniformLocation(prog, \"uNMatrix\");\r\n\r\n\t\t// Color.\r\n\t\tprog.colorUniform = gl.getUniformLocation(prog, \"uColor\");\r\n\r\n\t\t// Light.\r\n\t\tprog.ambientLightUniform = gl.getUniformLocation(prog,\r\n\t\t\t\"ambientLight\");\r\n\t\t// Array for light sources uniforms.\r\n\t\tprog.lightUniform = [];\r\n\t\t// Loop over light sources.\r\n\t\tfor (let j = 0; j < illumination.light.length; j++) {\r\n\t\t\tlet lightNb = \"light[\" + j + \"]\";\r\n\t\t\t// Store one object for every light source.\r\n\t\t\tlet l = {};\r\n\t\t\tl.isOn = gl.getUniformLocation(prog, lightNb + \".isOn\");\r\n\t\t\tl.position = gl.getUniformLocation(prog, lightNb + \".position\");\r\n\t\t\tl.color = gl.getUniformLocation(prog, lightNb + \".color\");\r\n\t\t\tprog.lightUniform[j] = l;\r\n\t\t}\r\n\r\n\t\t// Material.\r\n\t\tprog.materialKaUniform = gl.getUniformLocation(prog, \"material.ka\");\r\n\t\tprog.materialKdUniform = gl.getUniformLocation(prog, \"material.kd\");\r\n\t\tprog.materialKsUniform = gl.getUniformLocation(prog, \"material.ks\");\r\n\t\tprog.materialKeUniform = gl.getUniformLocation(prog, \"material.ke\");\r\n\t}\r\n\r\n\t/**\r\n\t * @paramter material : objekt with optional ka, kd, ks, ke.\r\n\t * @retrun material : objekt with ka, kd, ks, ke.\r\n\t */\r\n\tfunction createPhongMaterial(material) {\r\n\t\tmaterial = material || {};\r\n\t\t// Set some default values,\r\n\t\t// if not defined in material paramter.\r\n\t\tmaterial.ka = material.ka || [0.3, 0.3, 0.3];\r\n\t\tmaterial.kd = material.kd || [0.6, 0.6, 0.6];\r\n\t\tmaterial.ks = material.ks || [0.8, 0.8, 0.8];\r\n\t\tmaterial.ke = material.ke || 10.;\r\n\r\n\t\treturn material;\r\n\t}\r\n\r\n\tfunction initModels() {\r\n\t\t// fillstyle\r\n\t\tlet fs = \"fill\";\r\n\r\n\t\t// Create some default material.\r\n\t\tlet mDefault = createPhongMaterial();\r\n\r\n\t\tcreateModel(Torus.createVertexData(), fs, [0, 1, 0, 1], [0, .75, 0],\r\n\t\t\t[0, 0, 0, 0], [1, 1, 1, 1], mDefault);\r\n\t\tcreateModel(Sphere.createVertexData(), fs, [0, 0, 0, 1], [-1.25, .5, 0], [0, 0,\r\n\t\t\t0, 0], [.5, .5, .5], mDefault);\r\n\t\tcreateModel(Sphere.createVertexData(), fs, [0, 1, 0, 1], [1.25, .5, 0], [0, 0,\r\n\t\t\t0, 0], [.5, .5, .5], mDefault);\r\n\t\tcreateModel(Plane.createVertexData(), \"wireframe\", [0, 0, 0, 1], [0, 0, 0, 0], [0, 0, 0,\r\n\t\t\t0], [1, 1, 1, 1], mDefault);\r\n\r\n\t\t// Select one model that can be manipulated interactively by user.\r\n\t\tinteractiveModel = models[0];\r\n\t}\r\n\r\n\t/**\r\n\t * Create model object, fill it and push it in models array.\r\n\t * \r\n\t * @parameter geometryname: string with name of geometry.\r\n\t * @parameter fillstyle: wireframe, fill, fillwireframe.\r\n\t */\r\n\tfunction createModel(geometry, fillstyle, color, translate, rotate,\r\n\t\tscale, material) {\r\n\t\tlet model = {};\r\n\t\tmodel.fillstyle = fillstyle;\r\n\t\tmodel.color = color;\r\n\t\tinitDataAndBuffers(model, geometry);\r\n\t\tinitTransformations(model, translate, rotate, scale);\r\n\t\tmodel.material = material;\r\n\r\n\t\tmodels.push(model);\r\n\t}\r\n\r\n\t/**\r\n\t * Set scale, rotation and transformation for model.\r\n\t */\r\n\tfunction initTransformations(model, translate, rotate, scale) {\r\n\t\t// Store transformation vectors.\r\n\t\tmodel.translate = translate;\r\n\t\tmodel.rotate = rotate;\r\n\t\tmodel.scale = scale;\r\n\r\n\t\t// Create and initialize Model-Matrix.\r\n\t\tmodel.mMatrix = mat4.create();\r\n\r\n\t\t// Create and initialize Model-View-Matrix.\r\n\t\tmodel.mvMatrix = mat4.create();\r\n\r\n\t\t// Create and initialize Normal Matrix.\r\n\t\tmodel.nMatrix = mat3.create();\r\n\t}\r\n\r\n\t/**\r\n\t * Init data and buffers for model object.\r\n\t * \r\n\t * @parameter model: a model object to augment with data.\r\n\t * @parameter geometryname: string with name of geometry.\r\n\t */\r\n\tfunction initDataAndBuffers(model, geometry) {\r\n\t\t// Provide model object with vertex data arrays.\r\n\t\t// Fill data arrays for Vertex-Positions, Normals, Index data:\r\n\t\t// vertices, normals, indicesLines, indicesTris;\r\n\t\t// Pointer this refers to the window.\r\n\t\t// this[geometryname]['createVertexData'].apply(model);\r\n\t\tObject.assign(model, geometry);\r\n\r\n\t\t// Setup position vertex buffer object.\r\n\t\tmodel.vboPos = gl.createBuffer();\r\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, model.vboPos);\r\n\t\tgl.bufferData(gl.ARRAY_BUFFER, model.vertices, gl.STATIC_DRAW);\r\n\t\t// Bind vertex buffer to attribute variable.\r\n\t\tprog.positionAttrib = gl.getAttribLocation(prog, 'aPosition');\r\n\t\tgl.enableVertexAttribArray(prog.positionAttrib);\r\n\r\n\t\t// Setup normal vertex buffer object.\r\n\t\tmodel.vboNormal = gl.createBuffer();\r\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, model.vboNormal);\r\n\t\tgl.bufferData(gl.ARRAY_BUFFER, model.normals, gl.STATIC_DRAW);\r\n\t\t// Bind buffer to attribute variable.\r\n\t\tprog.normalAttrib = gl.getAttribLocation(prog, 'aNormal');\r\n\t\tgl.enableVertexAttribArray(prog.normalAttrib);\r\n\r\n\t\t// Setup lines index buffer object.\r\n\t\tmodel.iboLines = gl.createBuffer();\r\n\t\tgl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, model.iboLines);\r\n\t\tgl.bufferData(gl.ELEMENT_ARRAY_BUFFER, model.indicesLines,\r\n\t\t\tgl.STATIC_DRAW);\r\n\t\tmodel.iboLines.numberOfElements = model.indicesLines.length;\r\n\t\tgl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\r\n\r\n\t\t// Setup triangle index buffer object.\r\n\t\tmodel.iboTris = gl.createBuffer();\r\n\t\tgl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, model.iboTris);\r\n\t\tgl.bufferData(gl.ELEMENT_ARRAY_BUFFER, model.indicesTris,\r\n\t\t\tgl.STATIC_DRAW);\r\n\t\tmodel.iboTris.numberOfElements = model.indicesTris.length;\r\n\t\tgl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\r\n\t}\r\n\r\n\tfunction calcPosition(t = 0, r = 1, x = 0, y = 0) {\r\n\t\tlet posX = 0, posY = 0;\r\n\t\tposX = r * Math.cos(t);\r\n\t\tposY = r * Math.sin(t);\r\n\r\n\t\tposX += x;\r\n\t\tposY += y;\r\n\r\n\t\treturn [posX, posY];\r\n\t}\r\n\r\n\tfunction initEventHandler() {\r\n\t\t// Rotation step for models.\r\n\t\tlet deltaRotate = Math.PI / 36;\r\n\t\tlet deltaTranslate = 0.05;\r\n\t\tlet deltaScale = 0.05;\r\n\r\n\t\twindow.onkeydown = function (evt) {\r\n\t\t\tlet key = evt.which ? evt.which : evt.keyCode;\r\n\t\t\tlet c = String.fromCharCode(key);\r\n\t\t\t// console.log(evt);\r\n\t\t\t// Use shift key to change sign.\r\n\t\t\tlet sign = evt.shiftKey ? -1 : 1;\r\n\t\t\t// Rotate interactiveModel.\r\n\r\n\t\t\tlet nAngle = 2 * Math.PI / 30;\r\n\t\t\tlet [x, y] = [0, 0];\r\n\t\t\tswitch (c) {\r\n\t\t\t\tcase ('L'):\r\n\t\t\t\t\tlight1Angle += nAngle;\r\n\t\t\t\t\t[x, y] = calcPosition(light1Angle, lightR);\r\n\t\t\t\t\tillumination.light[1].position[0] = x;\r\n\t\t\t\t\tillumination.light[1].position[2] = y;\r\n\r\n\t\t\t\t\tlight2Angle += nAngle;\r\n\t\t\t\t\t[x, y] = calcPosition(light2Angle, lightR);\r\n\t\t\t\t\tillumination.light[2].position[0] = x;\r\n\t\t\t\t\tillumination.light[2].position[2] = y;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase ('I'):\r\n\t\t\t\t\tlight1Angle -= nAngle;\r\n\t\t\t\t\t[x, y] = calcPosition(light1Angle, lightR);\r\n\t\t\t\t\tillumination.light[1].position[0] = x;\r\n\t\t\t\t\tillumination.light[1].position[2] = y;\r\n\r\n\t\t\t\t\tlight2Angle -= nAngle;\r\n\t\t\t\t\t[x, y] = calcPosition(light2Angle, lightR);\r\n\t\t\t\t\tillumination.light[2].position[0] = x;\r\n\t\t\t\t\tillumination.light[2].position[2] = y;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tswitch (c) {\r\n\t\t\t\tcase ('X'):\r\n\t\t\t\t\tinteractiveModel.rotate[0] += sign * deltaRotate;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase ('Y'):\r\n\t\t\t\t\tinteractiveModel.rotate[1] += sign * deltaRotate;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase ('Z'):\r\n\t\t\t\t\tinteractiveModel.rotate[2] += sign * deltaRotate;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t// Scale/squeese interactiveModel.\r\n\t\t\tswitch (c) {\r\n\t\t\t\tcase ('S'):\r\n\t\t\t\t\tinteractiveModel.scale[0] *= 1 + sign * deltaScale;\r\n\t\t\t\t\tinteractiveModel.scale[1] *= 1 - sign * deltaScale;\r\n\t\t\t\t\tinteractiveModel.scale[2] *= 1 + sign * deltaScale;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t// Change projection of scene.\r\n\t\t\tswitch (c) {\r\n\t\t\t\tcase ('O'):\r\n\t\t\t\t\tcamera.projectionType = \"ortho\";\r\n\t\t\t\t\tcamera.lrtb = 2;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase ('F'):\r\n\t\t\t\t\tcamera.projectionType = \"frustum\";\r\n\t\t\t\t\tcamera.lrtb = 1.2;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase ('P'):\r\n\t\t\t\t\tcamera.projectionType = \"perspective\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t// Camera move and orbit.\r\n\t\t\tswitch (c) {\r\n\t\t\t\tcase ('C'):\r\n\t\t\t\t\t// Orbit camera.\r\n\t\t\t\t\tcamera.zAngle += sign * deltaRotate;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase ('H'):\r\n\t\t\t\t\t// Move camera up and down.\r\n\t\t\t\t\tcamera.eye[1] += sign * deltaTranslate;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase ('D'):\r\n\t\t\t\t\t// Camera distance to center.\r\n\t\t\t\t\tcamera.distance += sign * deltaTranslate;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase ('V'):\r\n\t\t\t\t\t// Camera fovy in radian.\r\n\t\t\t\t\tcamera.fovy += sign * 5 * Math.PI / 180;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase ('B'):\r\n\t\t\t\t\t// Camera near plane dimensions.\r\n\t\t\t\t\tcamera.lrtb += sign * 0.1;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t// Render the scene again on any key pressed.\r\n\t\t\trender();\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Run the rendering pipeline.\r\n\t */\r\n\tfunction render() {\r\n\t\t// Clear framebuffer and depth-/z-buffer.\r\n\t\tgl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n\t\tsetProjection();\r\n\r\n\t\tcalculateCameraOrbit();\r\n\r\n\t\t// Set view matrix depending on camera.\r\n\t\tmat4.lookAt(camera.vMatrix, camera.eye, camera.center, camera.up);\r\n\r\n\t\t// NEW\r\n\t\t// Set light uniforms.\r\n\t\tgl.uniform3fv(prog.ambientLightUniform, illumination.ambientLight);\r\n\t\t// Loop over light sources.\r\n\t\tfor (let j = 0; j < illumination.light.length; j++) {\r\n\t\t\t// bool is transferred as integer.\r\n\t\t\tgl.uniform1i(prog.lightUniform[j].isOn,\r\n\t\t\t\tillumination.light[j].isOn);\r\n\t\t\t// Tranform light postion in eye coordinates.\r\n\t\t\t// Copy current light position into a new array.\r\n\t\t\tlet lightPos = [].concat(illumination.light[j].position);\r\n\t\t\t// Add homogenious coordinate for transformation.\r\n\t\t\tlightPos.push(1.0);\r\n\t\t\tvec4.transformMat4(lightPos, lightPos, camera.vMatrix);\r\n\t\t\t// Remove homogenious coordinate.\r\n\t\t\tlightPos.pop();\r\n\t\t\tgl.uniform3fv(prog.lightUniform[j].position, lightPos);\r\n\t\t\tgl.uniform3fv(prog.lightUniform[j].color,\r\n\t\t\t\tillumination.light[j].color);\r\n\t\t}\r\n\r\n\t\t// Loop over models.\r\n\t\tfor (let i = 0; i < models.length; i++) {\r\n\t\t\t// Update modelview for model.\r\n\t\t\tupdateTransformations(models[i]);\r\n\r\n\t\t\t// Set uniforms for model.\r\n\t\t\t//\r\n\t\t\t// Transformation matrices.\r\n\t\t\tgl.uniformMatrix4fv(prog.mvMatrixUniform, false,\r\n\t\t\t\tmodels[i].mvMatrix);\r\n\t\t\tgl.uniformMatrix3fv(prog.nMatrixUniform, false,\r\n\t\t\t\tmodels[i].nMatrix);\r\n\t\t\t// Color (not used with lights).\r\n\t\t\tgl.uniform4fv(prog.colorUniform, models[i].color);\r\n\t\t\t// NEW\r\n\t\t\t// Material.\r\n\t\t\tgl.uniform3fv(prog.materialKaUniform, models[i].material.ka);\r\n\t\t\tgl.uniform3fv(prog.materialKdUniform, models[i].material.kd);\r\n\t\t\tgl.uniform3fv(prog.materialKsUniform, models[i].material.ks);\r\n\t\t\tgl.uniform1f(prog.materialKeUniform, models[i].material.ke);\r\n\r\n\t\t\tdraw(models[i]);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction calculateCameraOrbit() {\r\n\t\t// Calculate x,z position/eye of camera orbiting the center.\r\n\t\tlet x = 0, z = 2;\r\n\t\tcamera.eye[x] = camera.center[x];\r\n\t\tcamera.eye[z] = camera.center[z];\r\n\t\tcamera.eye[x] += camera.distance * Math.sin(camera.zAngle);\r\n\t\tcamera.eye[z] += camera.distance * Math.cos(camera.zAngle);\r\n\t}\r\n\r\n\tfunction setProjection() {\r\n\t\t// Set projection Matrix.\r\n\t\tlet v;\r\n\t\tswitch (camera.projectionType) {\r\n\t\t\tcase (\"ortho\"):\r\n\t\t\t\tv = camera.lrtb;\r\n\t\t\t\tmat4.ortho(camera.pMatrix, -v, v, -v, v, -10, 100);\r\n\t\t\t\tbreak;\r\n\t\t\tcase (\"frustum\"):\r\n\t\t\t\tv = camera.lrtb;\r\n\t\t\t\tmat4.frustum(camera.pMatrix, -v / 2, v / 2, -v / 2, v / 2,\r\n\t\t\t\t\t1, 10);\r\n\t\t\t\tbreak;\r\n\t\t\tcase (\"perspective\"):\r\n\t\t\t\tmat4.perspective(camera.pMatrix, camera.fovy, camera.aspect, 1,\r\n\t\t\t\t\t10);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\t// Set projection uniform.\r\n\t\tgl.uniformMatrix4fv(prog.pMatrixUniform, false, camera.pMatrix);\r\n\t}\r\n\r\n\t/**\r\n\t * Update model-view matrix for model.\r\n\t */\r\n\tfunction updateTransformations(model) {\r\n\r\n\t\t// Use shortcut variables.\r\n\t\tlet mMatrix = model.mMatrix;\r\n\t\tlet mvMatrix = model.mvMatrix;\r\n\r\n\t\t// Reset matrices to identity.\r\n\t\tmat4.identity(mMatrix);\r\n\t\tmat4.identity(mvMatrix);\r\n\r\n\t\t// Translate.\r\n\t\tmat4.translate(mMatrix, mMatrix, model.translate);\r\n\t\t// Rotate.\r\n\t\tmat4.rotateX(mMatrix, mMatrix, model.rotate[0]);\r\n\t\tmat4.rotateY(mMatrix, mMatrix, model.rotate[1]);\r\n\t\tmat4.rotateZ(mMatrix, mMatrix, model.rotate[2]);\r\n\t\t// Scale\r\n\t\tmat4.scale(mMatrix, mMatrix, model.scale);\r\n\r\n\t\t// Combine view and model matrix\r\n\t\t// by matrix multiplication to mvMatrix.\r\n\t\tmat4.multiply(mvMatrix, camera.vMatrix, mMatrix);\r\n\r\n\t\t// Calculate normal matrix from model matrix.\r\n\t\tmat3.normalFromMat4(model.nMatrix, mvMatrix);\r\n\t}\r\n\r\n\tfunction draw(model) {\r\n\t\t// // Setup Color\r\n\t\t// let colAttrib = gl.getAttribLocation(prog, 'vColor');\r\n\t\t// gl.vertexAttrib4f(colAttrib, model.color[0], model.color[1], model.color[2], model.color[3]);\r\n\r\n\t\t// Setup position VBO.\r\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, model.vboPos);\r\n\t\tgl.vertexAttribPointer(prog.positionAttrib, 3, gl.FLOAT,\r\n\t\t\tfalse, 0, 0);\r\n\r\n\t\t// Setup normal VBO.\r\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, model.vboNormal);\r\n\t\tgl.vertexAttribPointer(prog.normalAttrib, 3, gl.FLOAT, false, 0, 0);\r\n\r\n\t\t// Setup rendering tris.\r\n\t\tlet fill = (model.fillstyle.search(/fill/) != -1);\r\n\t\tif (fill) {\r\n\t\t\tgl.enableVertexAttribArray(prog.normalAttrib);\r\n\t\t\tgl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, model.iboTris);\r\n\t\t\tgl.drawElements(gl.TRIANGLES, model.iboTris.numberOfElements,\r\n\t\t\t\tgl.UNSIGNED_SHORT, 0);\r\n\t\t}\r\n\r\n\t\t// Setup rendering lines.\r\n\t\tlet wireframe = (model.fillstyle.search(/wireframe/) != -1);\r\n\t\tif (wireframe) {\r\n\t\t\tgl.uniform4fv(prog.colorUniform, [0., 0., 0., 1.]);\r\n\t\t\tgl.disableVertexAttribArray(prog.normalAttrib);\r\n\t\t\tgl.vertexAttrib3f(prog.normalAttrib, 0, 0, 0);\r\n\t\t\tgl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, model.iboLines);\r\n\t\t\tgl.drawElements(gl.LINES, model.iboLines.numberOfElements,\r\n\t\t\t\tgl.UNSIGNED_SHORT, 0);\r\n\t\t}\r\n\t}\r\n\r\n\t// App interface.\r\n\treturn {\r\n\t\tstart: start\r\n\t};\r\n\r\n}());\r\n\r\nexport default App;","export let CelVS = `\r\n    attribute vec3 aPosition;\r\n    attribute vec3 aNormal;\r\n\r\n    uniform mat4 uPMatrix;\r\n    uniform mat4 uMVMatrix;\r\n    uniform mat3 uNMatrix;\r\n    uniform sampler2D uSamplerShadow;\r\n\r\n    // uLightSpaceMatrix * vec4(vVertex, 1.0);\r\n\r\n    uniform vec4 uColor;\r\n    varying vec4 vColor;\r\n    varying vec3 vPosition;\r\n    varying vec3 vNormal;\r\n                \r\n    // Ambient light.\r\n    uniform vec3 ambientLight;\r\n\r\n    // Pointlights.\r\n    const int MAX_LIGHT_SOURCES = 8;\r\n    struct LightSource {\r\n        bool isOn;\r\n        vec3 position;\r\n        vec3 color;\r\n    };\r\n    uniform LightSource light[MAX_LIGHT_SOURCES];\r\n\r\n    void main(){\r\n        // Calculate vertex position in eye coordinates. \r\n        vec4 tPosition = uMVMatrix * vec4(aPosition, 1.0);\r\n        // Calculate projektion.\r\n        gl_Position = uPMatrix * tPosition;\r\n\r\n        vec3 tNormal = normalize(uNMatrix * aNormal);\r\n        \r\n        // Calculate view vector.\r\n        vec3 v = normalize(-tPosition.xyz);\t\r\n                        \r\n        // vColor = fragmentColor;\r\n        // vColor = vec4( toon(tPosition.xyz, tNormal, v), 1.0);\r\n        vColor = uColor;\r\n        vPosition = aPosition;\r\n        vNormal = aNormal;\r\n    }\r\n`\r\n\r\n// float ambient = 0.1;\r\n// vec3 normal = normalize(vNormal);\r\n// vec3 lightDir = normalize(uLightPos - vVertex);\r\n// float diffuse = max(dot(normal, lightDir), 0.0);\r\n// float specularStrength = 0.5;\r\n// vec3 viewDir = normalize(uViewPos - vVertex);\r\n// vec3 reflectDir = reflect(-lightDir, normal);\r\n// float specular = pow(max(dot(viewDir, reflectDir), 0.0), 32.0);\r\n// float shadow = ShadowCalculation(vVertexLightPos);\r\n// float lightIntensity = (ambient + (1.0 - shadow) *  diffuse + specular);\r\n// if(uActivateCel){\r\n//     lightIntensity = ceil(lightIntensity*uNumberCel)/uNumberCel;\r\n// }\r\n// vec3 color = uCelColor * uLightColor * lightIntensity;\r\n// gl_FragColor = vec4(color, 1.0);","export let CelFS = `\r\n    precision mediump float;\r\n                    \r\n    varying vec4 vColor;\r\n\r\n    vec3 uEyePosition = vec3(0.0, 0.0, 0.0);\r\n    vec3 uLightPosition = vec3(3., 1., 3.);\r\n    vec3 uLightAmbient = vec3(1, 1, 1);\r\n    vec3 uLightDiffuse = vec3(1, 1, 1);\r\n    vec3 uLightSpecular = vec3(1, 1, 1);\r\n    // vec3 uAmbient = vec3(0.1, 0.25, 0.1);\r\n    // vec3 uDiffuse = vec3(0.5, 0.8, 0);\r\n    // vec3 uSpecular = vec3(0.3, 0.3, 0.3);\r\n    vec3 uAmbient = vec3(0,0,0);\r\n    vec3 uDiffuse = vec3(0,0,0);\r\n    vec3 uSpecular = vec3(0,0,0);\r\n\r\n    float uShininess = 128.0;\r\n    float uTones = 4.0;\r\n    float uSpecularTones = 2.0;           \r\n  \r\n    // geometry properties\r\n    varying vec3 vPosition; \r\n    varying vec3 vNormal; \r\n    \r\n    void main(void) {\r\n            \r\n        uAmbient = vec3( vColor );\r\n        uDiffuse = vec3( vColor );\r\n        uSpecular = vec3( vColor );\r\n\r\n        // ambient term\r\n        vec3 ambient = uAmbient * uLightAmbient; \r\n                \r\n        // diffuse term\r\n        vec3 normal = normalize(vNormal); \r\n        vec3 light = normalize(uLightPosition - vPosition);\r\n        float lambert = max(0.0, dot(normal,light));\r\n        float tone = floor(lambert * uTones);\r\n        lambert = tone / uTones;\r\n        vec3 diffuse = uDiffuse * uLightDiffuse * lambert;\r\n                \r\n        // specular term\r\n        vec3 eye = normalize(uEyePosition - vPosition);\r\n        vec3 halfVec = normalize(light + eye);\r\n        float highlight = pow(max(0.0, dot(normal, halfVec)),uShininess);\r\n        tone = floor(highlight * uSpecularTones);\r\n        highlight = tone / uSpecularTones;\r\n        vec3 specular = uSpecular * uLightSpecular * highlight;\r\n                \r\n        // combine to find lit color\r\n        vec3 litColor = ambient + diffuse + specular; \r\n        \r\n        gl_FragColor = vec4(litColor, 1.0);\r\n        \r\n    }\r\n`\r\n\r\n\r\n\r\n\r\n\r\n","import * as mat3 from 'gl-matrix/esm/mat3.js';\r\nimport * as mat4 from 'gl-matrix/esm/mat4.js';\r\nimport * as vec4 from 'gl-matrix/esm/vec4.js';\r\n\r\nimport { VertexShader } from './shader/VertexShader.js';\r\nimport { FragmentShader } from './shader/FragmentShader.js';\r\n\r\nimport { Plane } from './shapes/Plane.js';\r\nimport { Sphere } from './shapes/Sphere.js';\r\nimport { Torus } from './shapes/Torus.js';\r\nimport { CelVS } from './shader/CelVS.js';\r\nimport { CelFS } from './shader/CelFS.js';\r\n\r\nlet App = (function () {\r\n\r\n\tlet gl;\r\n\r\n\t// The shader program object is also used to\r\n\t// store attribute and uniform locations.\r\n\tlet prog;\r\n\r\n\t// Array of model objects.\r\n\tlet models = [];\r\n\r\n\t// Model that is target for user input.\r\n\tlet interactiveModel;\r\n\r\n\tlet lightR = 3;\r\n\tlet light1Angle = 0;\r\n\tlet light2Angle = Math.PI;\r\n\r\n\tlet [l1x, l1y] = calcPosition(light1Angle, lightR);\r\n\tlet [l2x, l2y] = calcPosition(light2Angle, lightR);\r\n\r\n\tlet camera = {\r\n\t\t// Initial position of the camera.\r\n\t\teye: [0, 1, 4],\r\n\t\t// Point to look at.\r\n\t\tcenter: [0, 0, 0],\r\n\t\t// Roll and pitch of the camera.\r\n\t\tup: [0, 1, 0],\r\n\t\t// Opening angle given in radian.\r\n\t\t// radian = degree*2*PI/360.\r\n\t\tfovy: 60.0 * Math.PI / 180,\r\n\t\t// Camera near plane dimensions:\r\n\t\t// value for left right top bottom in projection.\r\n\t\tlrtb: 2.0,\r\n\t\t// View matrix.\r\n\t\tvMatrix: mat4.create(),\r\n\t\t// Projection matrix.\r\n\t\tpMatrix: mat4.create(),\r\n\t\t// Projection types: ortho, perspective, frustum.\r\n\t\tprojectionType: \"perspective\",\r\n\t\t// Angle to Z-Axis for camera when orbiting the center\r\n\t\t// given in radian.\r\n\t\tzAngle: 0,\r\n\t\t// Distance in XZ-Plane from center when orbiting.\r\n\t\tdistance: 4,\r\n\t};\r\n\r\n\t// Objekt with light sources characteristics in the scene.\r\n\tlet illumination = {\r\n\t\tambientLight: [.5, .5, .5],\r\n\t\tlight: [{\r\n\t\t\tisOn: true,\r\n\t\t\tposition: [3., 1., 3.],\r\n\t\t\tcolor: [1., 1., 1.]\r\n\t\t\t// }, {\r\n\t\t\t// \tisOn: true,\r\n\t\t\t// \tposition: [l1x, 1., l1y],\r\n\t\t\t// \tcolor: [0.0, 1.0, 0.0]\r\n\t\t\t// }, {\r\n\t\t\t// \tisOn: true,\r\n\t\t\t// \tposition: [l2x, 1., l2y],\r\n\t\t\t// \tcolor: [0.0, 0.0, 1.0]\r\n\t\t}]\r\n\t};\r\n\r\n\tfunction start() {\r\n\t\tinit();\r\n\t\trender();\r\n\t}\r\n\r\n\tfunction init() {\r\n\t\tinitWebGL();\r\n\t\tinitShaderProgram();\r\n\t\tinitUniforms();\r\n\t\tinitModels();\r\n\t\tinitPipline();\r\n\t\trotate();\r\n\t}\r\n\r\n\tfunction initWebGL() {\r\n\t\t// Get canvas and WebGL context.\r\n\t\tlet canvas = document.getElementById('canvas1');\r\n\t\tgl = canvas.getContext('webgl');\r\n\t\tgl.viewportWidth = canvas.width;\r\n\t\tgl.viewportHeight = canvas.height;\r\n\t}\r\n\r\n\t/**\r\n\t * Init pipeline parmters that will not change again. If projection or\r\n\t * viewport change, thier setup must be in render function.\r\n\t */\r\n\tfunction initPipline() {\r\n\t\tgl.clearColor(.95, .95, .95, 1);\r\n\r\n\t\t// Backface culling.\r\n\t\tgl.frontFace(gl.CCW);\r\n\t\tgl.enable(gl.CULL_FACE);\r\n\t\tgl.cullFace(gl.BACK);\r\n\r\n\t\t// Depth(Z)-Buffer.\r\n\t\tgl.enable(gl.DEPTH_TEST);\r\n\r\n\t\t// Polygon offset of rastered Fragments.\r\n\t\tgl.enable(gl.POLYGON_OFFSET_FILL);\r\n\t\tgl.polygonOffset(0.5, 0);\r\n\r\n\t\t// Set viewport.\r\n\t\tgl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);\r\n\r\n\t\t// Init camera.\r\n\t\t// Set projection aspect ratio.\r\n\t\tcamera.aspect = gl.viewportWidth / gl.viewportHeight;\r\n\t}\r\n\r\n\tfunction initShaderProgram() {\r\n\t\t// Init vertex shader.\r\n\t\tlet vs = initShader(gl.VERTEX_SHADER, CelVS);\r\n\t\t// Init fragment shader.\r\n\t\tlet fs = initShader(gl.FRAGMENT_SHADER, CelFS);\r\n\t\t// Link shader into a shader program.\r\n\t\tprog = gl.createProgram();\r\n\t\tgl.attachShader(prog, vs);\r\n\t\tgl.attachShader(prog, fs);\r\n\t\tgl.bindAttribLocation(prog, 0, \"aPosition\");\r\n\t\tgl.linkProgram(prog);\r\n\t\tgl.useProgram(prog);\r\n\t}\r\n\r\n\t/**\r\n\t * Create and init shader from source.\r\n\t * \r\n\t * @parameter shaderType: openGL shader type.\r\n\t * @parameter SourceTagId: Id of HTML Tag with shader source.\r\n\t * @returns shader object.\r\n\t */\r\n\tfunction initShader(shaderType, shaderSource) {\r\n\t\tlet shader = gl.createShader(shaderType);\r\n\t\t// let shaderSource = document.getElementById(SourceTagId).text;\r\n\t\tgl.shaderSource(shader, shaderSource);\r\n\t\tgl.compileShader(shader);\r\n\t\tif (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n\t\t\tconsole.log(gl.getShaderInfoLog(shader));\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\treturn shader;\r\n\t}\r\n\r\n\tfunction initUniforms() {\r\n\t\t// Projection Matrix.\r\n\t\tprog.pMatrixUniform = gl.getUniformLocation(prog, \"uPMatrix\");\r\n\r\n\t\t// Model-View-Matrix.\r\n\t\tprog.mvMatrixUniform = gl.getUniformLocation(prog, \"uMVMatrix\");\r\n\r\n\t\t// Normal Matrix.\r\n\t\tprog.nMatrixUniform = gl.getUniformLocation(prog, \"uNMatrix\");\r\n\r\n\t\t// Color.\r\n\t\tprog.colorUniform = gl.getUniformLocation(prog, \"uColor\");\r\n\r\n\t\t// Light.\r\n\t\tprog.ambientLightUniform = gl.getUniformLocation(prog, \"ambientLight\");\r\n\r\n\t\t// Array for light sources uniforms.\r\n\t\tprog.lightUniform = [];\r\n\t\t// Loop over light sources.\r\n\t\tfor (let j = 0; j < illumination.light.length; j++) {\r\n\t\t\tlet lightNb = \"light[\" + j + \"]\";\r\n\t\t\t// Store one object for every light source.\r\n\t\t\tlet l = {};\r\n\t\t\tl.isOn = gl.getUniformLocation(prog, lightNb + \".isOn\");\r\n\t\t\tl.position = gl.getUniformLocation(prog, lightNb + \".position\");\r\n\t\t\tl.color = gl.getUniformLocation(prog, lightNb + \".color\");\r\n\t\t\tprog.lightUniform[j] = l;\r\n\t\t}\r\n\r\n\t\t// Material.\r\n\t\tprog.materialKaUniform = gl.getUniformLocation(prog, \"material.ka\");\r\n\t\tprog.materialKdUniform = gl.getUniformLocation(prog, \"material.kd\");\r\n\t\tprog.materialKsUniform = gl.getUniformLocation(prog, \"material.ks\");\r\n\t\tprog.materialKeUniform = gl.getUniformLocation(prog, \"material.ke\");\r\n\r\n\t\tprog.samplerShadowMapUniform = gl.getUniformLocation(prog, 'uSamplerShadow');\r\n\t\tgl.uniform1i(prog.samplerShadowMapUniform, 1);\r\n\r\n\r\n\r\n\t\t// let shadowWidth = 500, shadowHeight = 500;\r\n\t\t// let depthMapTexture = gl.createTexture();\r\n\t\t// gl.bindTexture(gl.TEXTURE_2D, depthMapTexture);\r\n\t\t// gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n\t\t// gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n\t\t// gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, shadowWidth, shadowHeight, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\r\n\r\n\t\t// gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, depthMapTexture, 0);\r\n\t\t// gl.activeTexture(gl.TEXTURE1);\r\n\t\t// gl.bindTexture(gl.TEXTURE_2D, depthMapTexture);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @paramter material : objekt with optional ka, kd, ks, ke.\r\n\t * @retrun material : objekt with ka, kd, ks, ke.\r\n\t */\r\n\tfunction createPhongMaterial(material) {\r\n\t\tmaterial = material || {};\r\n\t\t// Set some default values,\r\n\t\t// if not defined in material paramter.\r\n\t\tmaterial.ka = material.ka || [0.3, 0.3, 0.3];\r\n\t\tmaterial.kd = material.kd || [0.6, 0.6, 0.6];\r\n\t\tmaterial.ks = material.ks || [0.8, 0.8, 0.8];\r\n\t\tmaterial.ke = material.ke || 10.;\r\n\r\n\t\treturn material;\r\n\t}\r\n\r\n\tfunction initModels() {\r\n\t\t// fillstyle\r\n\t\tlet fs = \"fill\";\r\n\r\n\t\t// Create some default material.\r\n\t\tlet mDefault = createPhongMaterial();\r\n\r\n\t\tcreateModel(Torus.createVertexData(), fs, [0, .5, .5, 1], [0, .75, 0],\r\n\t\t\t[0, 0, 0, 0], [1, 1, 1, 1], mDefault);\r\n\t\tcreateModel(Sphere.createVertexData(), fs, [.5, 0, .5, 1], [-1.25, .5, 0], [0, 0,\r\n\t\t\t0, 0], [.5, .5, .5], mDefault);\r\n\t\tcreateModel(Sphere.createVertexData(), fs, [.5, .5, 0, 1], [1.25, .5, 0], [0, 0,\r\n\t\t\t0, 0], [.5, .5, .5], mDefault);\r\n\t\tcreateModel(Plane.createVertexData(), \"fillwireframe\", [0.5, 0.5, 0.5, 1], [0, 0, 0, 0], [0, 0, 0,\r\n\t\t\t0], [1, 1, 1, 1], mDefault);\r\n\r\n\t\t// Select one model that can be manipulated interactively by user.\r\n\t\tinteractiveModel = models[0];\r\n\t}\r\n\r\n\t/**\r\n\t * Create model object, fill it and push it in models array.\r\n\t * \r\n\t * @parameter geometryname: string with name of geometry.\r\n\t * @parameter fillstyle: wireframe, fill, fillwireframe.\r\n\t */\r\n\tfunction createModel(geometry, fillstyle, color, translate, rotate,\r\n\t\tscale, material) {\r\n\t\tlet model = {};\r\n\t\tmodel.fillstyle = fillstyle;\r\n\t\tmodel.color = color;\r\n\t\tinitDataAndBuffers(model, geometry);\r\n\t\tinitTransformations(model, translate, rotate, scale);\r\n\t\tmodel.material = material;\r\n\r\n\t\tmodels.push(model);\r\n\t}\r\n\r\n\t/**\r\n\t * Set scale, rotation and transformation for model.\r\n\t */\r\n\tfunction initTransformations(model, translate, rotate, scale) {\r\n\t\t// Store transformation vectors.\r\n\t\tmodel.translate = translate;\r\n\t\tmodel.rotate = rotate;\r\n\t\tmodel.scale = scale;\r\n\r\n\t\t// Create and initialize Model-Matrix.\r\n\t\tmodel.mMatrix = mat4.create();\r\n\r\n\t\t// Create and initialize Model-View-Matrix.\r\n\t\tmodel.mvMatrix = mat4.create();\r\n\r\n\t\t// Create and initialize Normal Matrix.\r\n\t\tmodel.nMatrix = mat3.create();\r\n\t}\r\n\r\n\t/**\r\n\t * Init data and buffers for model object.\r\n\t * \r\n\t * @parameter model: a model object to augment with data.\r\n\t * @parameter geometryname: string with name of geometry.\r\n\t */\r\n\tfunction initDataAndBuffers(model, geometry) {\r\n\t\t// Provide model object with vertex data arrays.\r\n\t\t// Fill data arrays for Vertex-Positions, Normals, Index data:\r\n\t\t// vertices, normals, indicesLines, indicesTris;\r\n\t\t// Pointer this refers to the window.\r\n\t\t// this[geometryname]['createVertexData'].apply(model);\r\n\t\tObject.assign(model, geometry);\r\n\r\n\t\t// Setup position vertex buffer object.\r\n\t\tmodel.vboPos = gl.createBuffer();\r\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, model.vboPos);\r\n\t\tgl.bufferData(gl.ARRAY_BUFFER, model.vertices, gl.STATIC_DRAW);\r\n\t\t// Bind vertex buffer to attribute variable.\r\n\t\tprog.positionAttrib = gl.getAttribLocation(prog, 'aPosition');\r\n\t\tgl.enableVertexAttribArray(prog.positionAttrib);\r\n\r\n\t\t// Setup normal vertex buffer object.\r\n\t\tmodel.vboNormal = gl.createBuffer();\r\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, model.vboNormal);\r\n\t\tgl.bufferData(gl.ARRAY_BUFFER, model.normals, gl.STATIC_DRAW);\r\n\t\t// Bind buffer to attribute variable.\r\n\t\tprog.normalAttrib = gl.getAttribLocation(prog, 'aNormal');\r\n\t\tgl.enableVertexAttribArray(prog.normalAttrib);\r\n\r\n\t\t// Setup lines index buffer object.\r\n\t\tmodel.iboLines = gl.createBuffer();\r\n\t\tgl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, model.iboLines);\r\n\t\tgl.bufferData(gl.ELEMENT_ARRAY_BUFFER, model.indicesLines,\r\n\t\t\tgl.STATIC_DRAW);\r\n\t\tmodel.iboLines.numberOfElements = model.indicesLines.length;\r\n\t\tgl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\r\n\r\n\t\t// Setup triangle index buffer object.\r\n\t\tmodel.iboTris = gl.createBuffer();\r\n\t\tgl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, model.iboTris);\r\n\t\tgl.bufferData(gl.ELEMENT_ARRAY_BUFFER, model.indicesTris,\r\n\t\t\tgl.STATIC_DRAW);\r\n\t\tmodel.iboTris.numberOfElements = model.indicesTris.length;\r\n\t\tgl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\r\n\t}\r\n\r\n\tfunction calcPosition(t = 0, r = 1, x = 0, y = 0) {\r\n\t\tlet posX = 0, posY = 0;\r\n\t\tposX = r * Math.cos(t);\r\n\t\tposY = r * Math.sin(t);\r\n\r\n\t\tposX += x;\r\n\t\tposY += y;\r\n\r\n\t\treturn [posX, posY];\r\n\t}\r\n\r\n\tfunction rotate() {\r\n\t\t// Rotation step for models.\r\n\t\tlet deltaRotate = Math.PI / 120;\r\n\t\tcamera.zAngle += deltaRotate;\r\n\t\trender();\r\n\t\twindow.requestAnimationFrame(rotate);\r\n\t}\r\n\r\n\t/**\r\n\t * Run the rendering pipeline.\r\n\t */\r\n\tfunction render() {\r\n\t\t// Clear framebuffer and depth-/z-buffer.\r\n\t\tgl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n\t\tsetProjection();\r\n\r\n\t\tcalculateCameraOrbit();\r\n\r\n\t\t// Set view matrix depending on camera.\r\n\t\tmat4.lookAt(camera.vMatrix, camera.eye, camera.center, camera.up);\r\n\r\n\t\t// NEW\r\n\t\t// Set light uniforms.\r\n\t\tgl.uniform3fv(prog.ambientLightUniform, illumination.ambientLight);\r\n\r\n\t\t// Loop over light sources.\r\n\t\tfor (let j = 0; j < illumination.light.length; j++) {\r\n\t\t\t// bool is transferred as integer.\r\n\t\t\tgl.uniform1i(prog.lightUniform[j].isOn,\r\n\t\t\t\tillumination.light[j].isOn);\r\n\t\t\t// Tranform light postion in eye coordinates.\r\n\t\t\t// Copy current light position into a new array.\r\n\t\t\tlet lightPos = [].concat(illumination.light[j].position);\r\n\t\t\t// Add homogenious coordinate for transformation.\r\n\t\t\tlightPos.push(1.0);\r\n\t\t\tvec4.transformMat4(lightPos, lightPos, camera.vMatrix);\r\n\t\t\t// Remove homogenious coordinate.\r\n\t\t\tlightPos.pop();\r\n\t\t\tgl.uniform3fv(prog.lightUniform[j].position, lightPos);\r\n\t\t\tgl.uniform3fv(prog.lightUniform[j].color,\r\n\t\t\t\tillumination.light[j].color);\r\n\t\t}\r\n\r\n\t\t// Loop over models.\r\n\t\tfor (let i = 0; i < models.length; i++) {\r\n\t\t\t// Update modelview for model.\r\n\t\t\tupdateTransformations(models[i]);\r\n\r\n\t\t\t// Set uniforms for model.\r\n\t\t\t//\r\n\t\t\t// Transformation matrices.\r\n\t\t\tgl.uniformMatrix4fv(prog.mvMatrixUniform, false, models[i].mvMatrix);\r\n\t\t\tgl.uniformMatrix3fv(prog.nMatrixUniform, false, models[i].nMatrix);\r\n\r\n\t\t\t// Color (not used with lights).\r\n\t\t\tgl.uniform4fv(prog.colorUniform, models[i].color);\r\n\t\t\t// NEW\r\n\t\t\t// Material.\r\n\t\t\tgl.uniform3fv(prog.materialKaUniform, models[i].material.ka);\r\n\t\t\tgl.uniform3fv(prog.materialKdUniform, models[i].material.kd);\r\n\t\t\tgl.uniform3fv(prog.materialKsUniform, models[i].material.ks);\r\n\t\t\tgl.uniform1f(prog.materialKeUniform, models[i].material.ke);\r\n\r\n\t\t\tdraw(models[i]);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction calculateCameraOrbit() {\r\n\t\t// Calculate x,z position/eye of camera orbiting the center.\r\n\t\tlet x = 0, z = 2;\r\n\t\tcamera.eye[x] = camera.center[x];\r\n\t\tcamera.eye[z] = camera.center[z];\r\n\t\tcamera.eye[x] += camera.distance * Math.sin(camera.zAngle);\r\n\t\tcamera.eye[z] += camera.distance * Math.cos(camera.zAngle);\r\n\t}\r\n\r\n\tfunction setProjection() {\r\n\t\t// Set projection Matrix.\r\n\t\tlet v;\r\n\t\tswitch (camera.projectionType) {\r\n\t\t\tcase (\"ortho\"):\r\n\t\t\t\tv = camera.lrtb;\r\n\t\t\t\tmat4.ortho(camera.pMatrix, -v, v, -v, v, -10, 100);\r\n\t\t\t\tbreak;\r\n\t\t\tcase (\"frustum\"):\r\n\t\t\t\tv = camera.lrtb;\r\n\t\t\t\tmat4.frustum(camera.pMatrix, -v / 2, v / 2, -v / 2, v / 2,\r\n\t\t\t\t\t1, 10);\r\n\t\t\t\tbreak;\r\n\t\t\tcase (\"perspective\"):\r\n\t\t\t\tmat4.perspective(camera.pMatrix, camera.fovy, camera.aspect, 1,\r\n\t\t\t\t\t10);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\t// Set projection uniform.\r\n\t\tgl.uniformMatrix4fv(prog.pMatrixUniform, false, camera.pMatrix);\r\n\t}\r\n\r\n\t/**\r\n\t * Update model-view matrix for model.\r\n\t */\r\n\tfunction updateTransformations(model) {\r\n\r\n\t\t// Use shortcut variables.\r\n\t\tlet mMatrix = model.mMatrix;\r\n\t\tlet mvMatrix = model.mvMatrix;\r\n\r\n\t\t// Reset matrices to identity.\r\n\t\tmat4.identity(mMatrix);\r\n\t\tmat4.identity(mvMatrix);\r\n\r\n\t\t// Translate.\r\n\t\tmat4.translate(mMatrix, mMatrix, model.translate);\r\n\t\t// Rotate.\r\n\t\tmat4.rotateX(mMatrix, mMatrix, model.rotate[0]);\r\n\t\tmat4.rotateY(mMatrix, mMatrix, model.rotate[1]);\r\n\t\tmat4.rotateZ(mMatrix, mMatrix, model.rotate[2]);\r\n\t\t// Scale\r\n\t\tmat4.scale(mMatrix, mMatrix, model.scale);\r\n\r\n\t\t// Combine view and model matrix\r\n\t\t// by matrix multiplication to mvMatrix.\r\n\t\tmat4.multiply(mvMatrix, camera.vMatrix, mMatrix);\r\n\r\n\t\t// Calculate normal matrix from model matrix.\r\n\t\tmat3.normalFromMat4(model.nMatrix, mvMatrix);\r\n\t}\r\n\r\n\tfunction draw(model) {\r\n\t\t// // Setup Color\r\n\t\t// let colAttrib = gl.getAttribLocation(prog, 'vColor');\r\n\t\t// gl.vertexAttrib4f(colAttrib, model.color[0], model.color[1], model.color[2], model.color[3]);\r\n\r\n\t\t// Setup position VBO.\r\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, model.vboPos);\r\n\t\tgl.vertexAttribPointer(prog.positionAttrib, 3, gl.FLOAT,\r\n\t\t\tfalse, 0, 0);\r\n\r\n\t\t// Setup normal VBO.\r\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, model.vboNormal);\r\n\t\tgl.vertexAttribPointer(prog.normalAttrib, 3, gl.FLOAT, false, 0, 0);\r\n\r\n\t\t// Setup rendering tris.\r\n\t\tlet fill = (model.fillstyle.search(/fill/) != -1);\r\n\t\tif (fill) {\r\n\t\t\tgl.enableVertexAttribArray(prog.normalAttrib);\r\n\t\t\tgl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, model.iboTris);\r\n\t\t\tgl.drawElements(gl.TRIANGLES, model.iboTris.numberOfElements,\r\n\t\t\t\tgl.UNSIGNED_SHORT, 0);\r\n\t\t}\r\n\r\n\t\t// Setup rendering lines.\r\n\t\tlet wireframe = (model.fillstyle.search(/wireframe/) != -1);\r\n\t\tif (wireframe) {\r\n\t\t\tgl.uniform4fv(prog.colorUniform, [0., 0., 0., 1.]);\r\n\t\t\tgl.disableVertexAttribArray(prog.normalAttrib);\r\n\t\t\tgl.vertexAttrib3f(prog.normalAttrib, 0, 0, 0);\r\n\t\t\tgl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, model.iboLines);\r\n\t\t\tgl.drawElements(gl.LINES, model.iboLines.numberOfElements,\r\n\t\t\t\tgl.UNSIGNED_SHORT, 0);\r\n\t\t}\r\n\t}\r\n\r\n\t// App interface.\r\n\treturn {\r\n\t\tstart: start\r\n\t};\r\n\r\n}());\r\n\r\nexport default App;","import App from './App.js';\r\nimport App2 from './App2.js';\r\n\r\ndocument.body.onload = () => {\r\n    App.start();\r\n    App2.start();\r\n};"],"names":["glMatrix.ARRAY_TYPE","create","glMatrix.EPSILON","mat4.create","mat3.create","mat4.lookAt","vec4.transformMat4","mat4.ortho","mat4.frustum","mat4.perspective","mat4.identity","mat4.translate","mat4.rotateX","mat4.rotateY","mat4.rotateZ","mat4.scale","mat4.multiply","mat3.normalFromMat4","App","App2"],"mappings":";;;EAAA;EACA;EACA;EACA;EACA;EACO,IAAI,OAAO,GAAG,QAAQ,CAAC;EACvB,IAAI,UAAU,GAAG,OAAO,YAAY,KAAK,WAAW,GAAG,YAAY,GAAG,KAAK,CAAC;EAkCnF,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,GAAG,YAAY;EAC1C,EAAE,IAAI,CAAC,GAAG,CAAC;EACX,MAAM,CAAC,GAAG,SAAS,CAAC,MAAM,CAAC;AAC3B;EACA,EAAE,OAAO,CAAC,EAAE,EAAE;EACd,IAAI,CAAC,IAAI,SAAS,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;EACrC,GAAG;AACH;EACA,EAAE,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;EACtB,CAAC;;EChDD;EACA;EACA;EACA;AACA;EACA;EACA;EACA;EACA;EACA;AACA;AACA,EAAO,SAAS,MAAM,GAAG;EACzB,EAAE,IAAI,GAAG,GAAG,IAAIA,UAAmB,CAAC,CAAC,CAAC,CAAC;AACvC;EACA,EAAE,IAAIA,UAAmB,IAAI,YAAY,EAAE;EAC3C,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACf,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACf,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACf,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACf,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACf,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACf,GAAG;AACH;EACA,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACb,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACb,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACb,EAAE,OAAO,GAAG,CAAC;EACb,CAAC;AACD,EAkgBA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACA;AACA,EAAO,SAAS,cAAc,CAAC,GAAG,EAAE,CAAC,EAAE;EACvC,EAAE,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;EAChB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;EAChB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;EAChB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACjB,EAAE,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;EAChB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;EAChB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;EAChB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACjB,EAAE,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;EAChB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;EAChB,MAAM,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC;EACjB,MAAM,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;EAClB,EAAE,IAAI,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC;EACjB,MAAM,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC;EACjB,MAAM,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC;EACjB,MAAM,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;EAClB,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;EAClC,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;EAClC,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;EAClC,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;EAClC,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;EAClC,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;EAClC,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;EAClC,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;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;EACrD,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACZ,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACZ,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACZ,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACZ,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;EACrD,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;EACrD,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;EACrD,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;EACrD,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACZ,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACZ,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;EACb,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;EACb,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;EACrD,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;EACrD,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC;EACtD,EAAE,GAAG,CAAC,EAAE,C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,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC,QAAQ,CAAC,gBAAgB;EAC5D,IAAI,EAAE,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC;EAC1B,GAAG;EACH,EAAE;AACF;EACA;EACA,CAAC,OAAO;EACR,EAAE,KAAK,EAAE,KAAK;EACd,EAAE,CAAC;AACH;EACA,CAAC,EAAE,CAAC,CAAC;;EC5kBE,IAAI,KAAK,GAAG,CAAC;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;qCAAmC,nCC7D5B,IAAI,KAAK,GAAG,CAAC;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;EC3CD,IAAIC,KAAG,IAAI,YAAY;AACvB;EACA,CAAC,IAAI,EAAE,CAAC;AACR;EACA;EACA;EACA,CAAC,IAAI,IAAI,CAAC;AACV;EACA;EACA,CAAC,IAAI,MAAM,GAAG,EAAE,CAAC;AACjB,AAUA;EACA,CAAC,IAAI,MAAM,GAAG;EACd;EACA,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAChB;EACA,EAAE,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACnB;EACA,EAAE,EAAE,EAAE,CA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"}